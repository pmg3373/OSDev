GAS LISTING ulibs.s 			page 1


   1              	# 1 "ulibs.S"
   1              	/*
   0              	
   0              	
   2              	** SCCS ID:	@(#)ulibs.S	1.1	3/29/18
   3              	**
   4              	** File:	ulibs.S
   5              	**
   6              	** Author:	CSCI-452 class of 20175
   7              	**
   8              	** Contributor:
   9              	**
  10              	** Description:	assembly-language user-level library functions
  11              	*/
  12              	
  13              	#define	__SP_ASM__
  14              	
  15              	#include "syscalls.h"
   1              	/*
   2              	** SCCS ID:	@(#)syscalls.h	1.1	3/29/18
   3              	**
   4              	** File:	syscalls.h
   5              	**
   6              	** Author:	CSCI-452 class of 20175
   7              	**
   8              	** Contributor:
   9              	**
  10              	** Description:	System call module declarations
  11              	*/
  12              	
  13              	#ifndef _SYSCALL_H_
  14              	#define _SYSCALL_H_
  15              	
  16              	#include "common.h"
   1              	/*
  17              	
  16              	
  17              	/*
  18              	** System call stubs
  19              	**
  20              	** All have the same structure:
  21              	**
  22              	**      move a code into EAX
  23              	**      generate the interrupt
  24              	**      return to the caller
  25              	**
  26              	** As these are simple "leaf" routines, we don't use
  27              	** the standard enter/leave method to set up a stack
  28              	** frame - that takes time, and we don't really need it.
  29              	*/
  30              	
  31              	#define	SYSCALL(name) \
  32              		.globl	name			; \
  33              	name:					; \
  34              		movl	$SYS_##name, %eax	; \
  35              		int	$INT_VEC_SYSCALL	; \
  36              		ret
GAS LISTING ulibs.s 			page 2


  37              	
  38 0000 B8000000 	SYSCALL(exit)
  38      00CD42C3 
  39 0008 B8010000 	SYSCALL(read)
  39      00CD42C3 
  40 0010 B8020000 	SYSCALL(write)
  40      00CD42C3 
  41 0018 B8030000 	SYSCALL(fork)
  41      00CD42C3 
  42 0020 B8040000 	SYSCALL(exec)
  42      00CD42C3 
  43 0028 B8050000 	SYSCALL(kill)
  43      00CD42C3 
  44 0030 B8060000 	SYSCALL(wait)
  44      00CD42C3 
  45 0038 B8070000 	SYSCALL(sleep)
  45      00CD42C3 
  46 0040 B8080000 	SYSCALL(time)
  46      00CD42C3 
  47 0048 B8090000 	SYSCALL(pid)
  47      00CD42C3 
  48 0050 B80A0000 	SYSCALL(ppid)
  48      00CD42C3 
  49 0058 B80B0000 	SYSCALL(get_prio)
  49      00CD42C3 
  50 0060 B80C0000 	SYSCALL(set_prio)
  50      00CD42C3 
  51 0068 B80D0000 	SYSCALL(dumpme)
  51      00CD42C3 
  52              	
  53              	/*
  54              	** This is a bogus system call; it's here so that we can test
  55              	** our handling of out-of-range syscall codes in the syscall ISR.
  56              	*/
  57              	
  58 0070 B8720000 	SYSCALL(bogus)
  58      00CD42C3 
  59              	
  60              	/*
  61              	** do_exit()
  62              	**
  63              	** support function used as the "return to" address
  64              	** for user main() routines; it just calls exit(%eax)
  65              	*/
  66              	
  67              		.globl  do_exit
  68              	do_exit:
  69 0078 50       		pushl   %eax    // use whatever was in EAX as the status
  70 0079 E8FCFFFF 		call    exit    // terminate this process
  70      FF
  71              	
  72              	/*
  73              	** get_ra()
  74              	**
  75              	** Get the return address for the calling function
  76              	** (i.e., where whoever called us will go back to)
  77              	*/
GAS LISTING ulibs.s 			page 3


  78              		.globl	get_ra
  79              	
  80              	get_ra:
  81              		// DO NOT create a stack frame - use the caller's
  82              		//
  83              		// Caller's return address is between the saved EBP
  84              		// and its first parameter
  85 007e 8B4504   		movl	4(%ebp), %eax
  86 0081 C3       		ret
GAS LISTING ulibs.s 			page 4


DEFINED SYMBOLS
             ulibs.S:38     .text:0000000000000000 exit
             ulibs.S:39     .text:0000000000000008 read
             ulibs.S:40     .text:0000000000000010 write
             ulibs.S:41     .text:0000000000000018 fork
             ulibs.S:42     .text:0000000000000020 exec
             ulibs.S:43     .text:0000000000000028 kill
             ulibs.S:44     .text:0000000000000030 wait
             ulibs.S:45     .text:0000000000000038 sleep
             ulibs.S:46     .text:0000000000000040 time
             ulibs.S:47     .text:0000000000000048 pid
             ulibs.S:48     .text:0000000000000050 ppid
             ulibs.S:49     .text:0000000000000058 get_prio
             ulibs.S:50     .text:0000000000000060 set_prio
             ulibs.S:51     .text:0000000000000068 dumpme
             ulibs.S:58     .text:0000000000000070 bogus
             ulibs.S:68     .text:0000000000000078 do_exit
             ulibs.S:80     .text:000000000000007e get_ra

NO UNDEFINED SYMBOLS
