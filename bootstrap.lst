GAS LISTING bootstrap.s 			page 1


   1              	# 1 "bootstrap.S"
   1              	/*
   0              	
   0              	
   2              	** SCCS ID:	@(#)bootstrap.S	1.8	3/29/18
   3              	**
   4              	** File:	bootstrap.S
   5              	**
   6              	** Author:	Jon Coles
   7              	**		copyleft 1999 Jon Coles
   8              	**
   9              	** Contributor:	Warren R. Carithers, K. Reek, Garrett C. Smith,
  10              	**		Walter Litwinczyk, David C. Larsen, Sean T. Congden
  11              	**
  12              	** Description:	Bootstrap routine.
  13              	**
  14              	** This bootstrap program is loaded by the PC BIOS into memory at
  15              	** location 0000:7C00.  It must be exactly 512 bytes long, and must
  16              	** end with the hex sequence AA55 at location 1FE.
  17              	**
  18              	** The bootstrap initially sets up a stack in low memory.  Next, it
  19              	** loads a second sector at 0000:7E00 (immediately following the
  20              	** boot block).  Then it loads the target program at TARGET_ADDRESS, 
  21              	** switches to protected mode, and branches to the target program.
  22              	**
  23              	** NOTE: This loader does NOT zero out the bss of any of the loaded
  24              	** programs.  However, a reset appears to set all memory locations
  25              	** between 0x10000 and 0x45d50 to 0, so there is no need to explicitly
  26              	** zero the bss in modules loaded into that range.
  27              	**
  28              	** Must assemble this as 16-bit code.
  29              	*/
  30              		.code16
  31              	
  32              	#include "bootstrap.h"
   1              	/*
  33              	
  34              	BOOT_SEGMENT	= 0x07C0	/* default BIOS addr to load boot sector */
  35              	BOOT_ADDRESS 	= 0x00007C00
  36              	START_SEGMENT	= 0x0000	/* where we'll put the startup code */
  37              	START_OFFSET	= 0x00007E00
  38              	SECTOR_SIZE	= 0x200		/* typical sector size for floppy & HD */
  39              	BOOT_SIZE	= (SECTOR_SIZE + SECTOR_SIZE)	/* 2 sectors */
  40              	OFFSET_LIMIT	= 65536 - SECTOR_SIZE
  41              	
  42              	MMAP_MAX_ENTRIES = (BOOT_ADDRESS - MMAP_ADDRESS - 4) / 24
  43              	
  44              	/*
  45              	** Symbol for locating the beginning of the code.
  46              	*/
  47              		.globl begtext
  48              	
  49              		.text
  50              	begtext:
  51              	
  52              	/*
  53              	** Entry point.	Begin by setting up a runtime stack.
GAS LISTING bootstrap.s 			page 2


  54              	*/
  55 0000 B8C007   		movw	$BOOT_SEGMENT, %ax	/* get our data seg */
  56 0003 8ED8     		movw	%ax, %ds
  57 0005 8ED0     		movw	%ax, %ss	/* stack segment starts at BOOT_SEGMENT */
  58 0007 B80040   		movw	$0x4000, %ax	/* and the stack starts 0x4000 beyond that */
  59 000a 89C4     		movw	%ax, %sp
  60              	
  61              	/*
  62              	** Next, verify that the disk is there and working.
  63              	*/
  64 000c B401     		movb	$0x01, %ah	/* test the disk status and make sure */
  65 000e 8A16FC01 		movb	drive, %dl	/* it's safe to proceed */
  66 0012 CD13     		int	$0x13
  67 0014 7308     		jnc	diskok
  68              	
  69 0016 BE6C01   		movw	$err_diskstatus, %si /* Something went wrong; print a message */
  70 0019 E8EF00   		call	dispMsg		/* and freeze. */
  71 001c EBFE     		jmp	.
  72              	
  73              	diskok:
  74 001e B80000   		movw	$0,%ax		/* Reset the disk */
  75 0021 8A16FC01 		movb	drive,%dl
  76 0025 CD13     		int	$0x13
  77              	
  78              		/* get drive parameters to determine number of heads and sectors/track */
  79 0027 31C0     		xorw	%ax, %ax	/* set ES:DI = 0000:0000 in case of BIOS bugs */
  80 0029 8EC0     		movw	%ax, %es
  81 002b 89C7     		movw	%ax, %di
  82 002d B408     		movb	$0x08, %ah	/* get drive parameters */
  83 002f 8A16FC01 		movb	drive, %dl	/* hard disk or floppy */
  84 0033 CD13     		int	$0x13
  85              	
  86              		/* store (max + 1) - CL[5:0] = maximum head, DH = maximum head */
  87 0035 80E13F   		andb	$0x3F, %cl
  88 0038 FEC1     		incb	%cl
  89 003a FEC6     		incb	%dh
  90              	
  91 003c 880E5801 		movb	%cl, max_sec
  92 0040 88365901 		movb	%dh, max_head
  93              	
  94              	/*
  95              	** The disk is OK, so we now need to load the second page of the bootstrap.
  96              	** It must immediately follow the boot sector on the disk,
  97              	** and the target program(s) must immediately follow.
  98              	*/
  99 0044 BE5A01   		movw	$msg_loading,%si /* Print the Loading message */
 100 0047 E8C100   		call	dispMsg
 101              	
 102 004a B80100   		movw	$1,%ax		/* sector count = 1 */
 103 004d BB0000   		movw	$START_SEGMENT,%bx /* read this into memory that */
 104 0050 8EC3     		movw	%bx,%es		/* immediately follows this code. */
 105 0052 BB007E   		movw	$START_OFFSET,%bx
 106 0055 E82E00   		call	readprog
 107              	
 108              	/*
 109              	** We've got the second block of the bootstrap program in memory. Now
 110              	** read all of the user's program blocks.  Use %di to point to the
GAS LISTING bootstrap.s 			page 3


 111              	** count field for the next block to load.
 112              	*/
 113 0058 BFFE03   		movw	$firstcount,%di
 114              	
 115 005b 1E       		pushw	%ds
 116 005c 8B1D     		movw	(%di), %bx
 117 005e B8D002   		movw	$MMAP_SEGMENT, %ax
 118 0061 8ED8     		movw	%ax, %ds
 119 0063 891E0A00 		movw	%bx, MMAP_SECTORS	/* store kernel image size */
 120 0067 1F       		popw	%ds
 121              	
 122              	nextblock:
 123 0068 8B05     		movw	(%di),%ax	/* get the # of sectors */
 124 006a 85C0     		testw	%ax,%ax		/* is it zero? */
 125 006c 0F849200 		jz	done_loading	/*   yes, nothing more to load. */
 126              	
 127 0070 83EF02   		subw	$2,%di
 128 0073 8B1D     		movw	(%di),%bx	/* get the segment value */
 129 0075 8EC3     		movw	%bx,%es		/*   and copy it to %es */
 130 0077 83EF02   		subw	$2,%di
 131 007a 8B1D     		movw	(%di),%bx	/* get the address offset */
 132 007c 83EF02   		subw	$2,%di
 133 007f 57       		pushw	%di		/* save di */
 134 0080 E80300   		call	readprog	/* read this program block, */
 135 0083 5F       		popw	%di		/* and restore di */
 136 0084 EBE2     		jmp	nextblock	/*   then go back and read the next one. */
 137              	
 138              	/*
 139              	** Read one complete program block into memory.
 140              	**
 141              	**	ax: number of sectors to read
 142              	**	es:bx = starting address for the block
 143              	*/
 144              	readprog:
 145 0086 50       		pushw	%ax		/* save sector count */
 146              	
 147 0087 B90300   		movw	$3,%cx		/* initial retry count is 3 */
 148              	retry:
 149 008a 51       		pushw	%cx		/* push the retry count on the stack. */
 150              	
 151 008b 8B0E5401 		movw	sec,%cx		/* get sector number */
 152 008f 8B165601 		movw	head,%dx	/* get head number */
 153 0093 8A16FC01 		movb	drive, %dl
 154              	
 155 0097 B80102   		movw	$0x0201,%ax	/* read 1 sector */
 156 009a CD13     		int	$0x13
 157 009c 7311     		jnc	readcont	/* jmp if it worked ok */
 158              	
 159 009e BE7E01   		movw	$err_diskread,%si /* report the error */
 160 00a1 E86700   		call	dispMsg
 161 00a4 59       		popw	%cx		/* get the retry count back */
 162 00a5 E2E3     		loop	retry		/*   and go try again. */
 163 00a7 BE9601   		movw	$err_diskfail,%si /* can't proceed, */
 164 00aa E85E00   		call	dispMsg		/* print message and freeze. */
 165 00ad EBFE     		jmp	.
 166              	
 167              	readcont:
GAS LISTING bootstrap.s 			page 4


 168 00af BE6201   		movw	$msg_dot,%si	/* print status: a dot */
 169 00b2 E85600   		call	dispMsg
 170 00b5 81FB00FE 		cmpw	$OFFSET_LIMIT,%bx  /* have we reached the offset limit? */
 171 00b9 7406     		je	adjust		/* Yes--must adjust the es register */
 172 00bb 81C30002 		addw	$SECTOR_SIZE,%bx	/* No--just adjust the block size to */
 173 00bf EB0A     		jmp	readcont2	/*    the offset and continue. */
 174              	
 175              	adjust:
 176 00c1 BB0000   		movw	$0, %bx		/* start offset over again */
 177 00c4 8CC0     		movw	%es, %ax
 178 00c6 050010   		addw	$0x1000,%ax	/* move segment pointer to next chunk */
 179 00c9 8EC0     		movw	%ax, %es
 180              	
 181              	readcont2:
 182 00cb FEC1     		incb	%cl		/* not done - move to the next sector */
 183 00cd 3A0E5801 		cmpb	max_sec, %cl	/* only 18 per track - see if we need */
 184 00d1 751B     		jnz	save_sector	/* to switch heads or tracks */
 185              	
 186 00d3 B101     		movb	$1, %cl		/* reset sector number */
 187 00d5 FEC6     		incb	%dh		/* first, switch heads */
 188 00d7 3A365901 		cmpb	max_head, %dh	/* there are only two - if we've already */
 189 00db 7511     		jnz	save_sector	/* used both, we need to switch tracks */
 190              	
 191 00dd 30F6     		xorb	%dh, %dh	/* reset to head $0 */
 192 00df FEC5     		incb	%ch		/* inc track number */
 193 00e1 80FD50   		cmpb	$80, %ch	/* 80 tracks per side - have we read all? */
 194 00e4 7508     		jnz	save_sector	/* read another track */
 195              	
 196 00e6 BE8C01   		movw	$err_toobig, %si 	/* report the error */
 197 00e9 E81F00   		call	dispMsg
 198 00ec EBFE     		jmp	.		/* and freeze */
 199              	
 200              	save_sector:
 201 00ee 890E5401 		movw	%cx,sec		/* save sector number */
 202 00f2 89165601 		movw	%dx,head	/*   and head number */
 203              	
 204 00f6 58       		popw	%ax		/* discard the retry count */
 205 00f7 58       		popw	%ax		/* get the sector count from the stack */
 206 00f8 48       		decw	%ax		/*   and decrement it. */
 207 00f9 7F8B     		jg	readprog	/* If it is zero, we're done reading. */
 208              	
 209              	readdone:
 210 00fb BE6A01   		movw	$msg_bar,%si	/* print message saying this block is done */
 211 00fe E80A00   		call	dispMsg
 212 0101 C3       		ret			/* and return to the caller */
 213              	
 214              	/*
 215              	** We've loaded the whole target program into memory,
 216              	** so it's time to transfer to the startup code.
 217              	*/
 218              	done_loading:
 219 0102 BE6401   		movw	$msg_go, %si	/* last status message */
 220 0105 E80300   		call	dispMsg
 221              	
 222 0108 E99801   		jmp	switch		/* move to the next phase */
 223              		
 224              	/*
GAS LISTING bootstrap.s 			page 5


 225              	** Support routine - display a message byte by byte to the monitor.
 226              	*/
 227              	dispMsg:	
 228 010b 50       		pushw	%ax
 229 010c 53       		pushw	%bx
 230              	repeat:
 231 010d AC       		lodsb			/* grab next character */
 232              	
 233 010e B40E     		movb	$0x0e, %ah	/* write and advance cursor */
 234 0110 BB0700   		movw	$0x07, %bx	/* page 0, white on blank, no blink */
 235 0113 08C0     		orb	%al, %al	/* AL is character to write */
 236 0115 7404     		jz	getOut		/* if we've reached the NUL, get out */
 237              	
 238 0117 CD10     		int	$0x10		/* otherwise, print and repeat */
 239 0119 EBF2     		jmp	repeat	
 240              	
 241              	getOut:				/* we're done, so return */
 242 011b 5B       		popw	%bx
 243 011c 58       		popw	%ax
 244 011d C3       		ret
 245              	
 246              	#if 0
 247              	/*
 248              	** Debugging routine.  This lives in the 1st block of the bootstrap
 249              	** so it can be called from there as well as from the 2nd block.
 250              	**
 251              	**	movw	$'x',%di	/* a single character to print */
 252              	**	movw	value,%ax	/* a 16-bit value to print in hex */
 253              	**	call	pnum
 254              	*/
 255              	pnum:
 256              		pushw	%ax
 257              		pushw	%bx
 258              		movw	%di,%ax
 259              		movb	$0xe,%ah
 260              		movw	$7,%bx
 261              		int	$0x10
 262              	
 263              		call	pdigit
 264              		call	pdigit
 265              		call	pdigit
 266              		call	pdigit
 267              	
 268              		popw	%bx
 269              		popw	%ax
 270              		ret
 271              	
 272              	pdigit:	movw	%si,%ax
 273              		shl	$4,%si
 274              		shr	$12,%ax
 275              		cmpw	$9,%ax
 276              		jle	pdd
 277              		addw	$'A'-10,%ax
 278              		jmp	prt
 279              	pdd:	addw	$'0',%ax
 280              	prt:	movb	$0xe,%ah
 281              		movw	$7,%bx
GAS LISTING bootstrap.s 			page 6


 282              		int	$0x10
 283              		ret
 284              	#endif
 285              	
 286              	/*
 287              	** Move the GDT entries from where they are to location 0000:0000
 288              	**
 289              	** As with the IDTR and GDTR loads, we need the offset for the GDT
 290              	** data from the beginning of the segment (0000:0000).
 291              	*/
 292              	move_gdt:
 293 011e 8CCE     		movw	%cs, %si
 294 0120 8EDE     		movw	%si, %ds
 295 0122 BE2B7F   		movw	$start_gdt + BOOT_ADDRESS, %si
 296 0125 BF5000   		movw	$GDT_SEGMENT, %di
 297 0128 8EC7     		movw	%di, %es
 298 012a 31FF     		xorw	%di, %di
 299 012c 66B92800 		movl	$gdt_len, %ecx
 299      0000
 300 0132 FC       		cld
 301 0133 F3A4     		rep	movsb
 302 0135 C3       		ret
 303              	
 304              	/*
 305              	** Determine the amount of physical memory available to the system.
 306              	*/
 307              	check_mem_basic:
 308 0136 50       		pushw	%ax
 309 0137 1E       		pushw	%ds
 310 0138 B8D002   		movw	$MMAP_SEGMENT, %ax
 311 013b 8ED8     		movw	%ax, %ds	  /* Write relative to the memory map start */
 312 013d B801E8   		movw	$0xE801, %ax	  /* Get memory size for >64M configurations */
 313 0140 CD15     		int	$0x15
 314 0142 A30000   		movw	%ax, MMAP_EXT_LO  /* extended memory between 1M - 16M in K */
 315 0145 891E0200 		movw	%bx, MMAP_EXT_HI  /* extended memory > 16M in 64K blocks */
 316 0149 890E0400 		movw	%cx, MMAP_CFG_LO  /* configured memory between 1M - 16M in K */
 317 014d 89160600 		movw	%dx, MMAP_CFG_HI  /* configured memory > 16M in 64K blocks */
 318 0151 1F       		popw	%ds
 319 0152 58       		popw	%ax
 320 0153 C3       		ret
 321              	
 322              	/*
 323              	** DATA AREAS.
 324              	**
 325              	** Next sector number and head number to read from.
 326              	*/
 327 0154 0200     	sec:	.word	2	/* cylinder=0, sector=1 */
 328 0156 0000     	head:	.word	0	/* head=0 */
 329 0158 13       	max_sec:	.byte	19	/* up to 18 sectors per floppy track */
 330 0159 02       	max_head:	.byte	2	/* only two r/w heads per floppy drive */
 331              	
 332              	/*
 333              	** Status and error messages.
 334              	*/
 335              	msg_loading:
 336 015a 4C6F6164 		.asciz "Loading"
 336      696E6700 
GAS LISTING bootstrap.s 			page 7


 337              	msg_dot:
 338 0162 2E00     		.asciz "."
 339              	msg_go:
 340 0164 646F6E65 		.asciz "done."
 340      2E00
 341              	msg_bar:
 342 016a 7C00     		.asciz	"|"
 343              	
 344              	/*
 345              	** Error messages.
 346              	*/
 347              	err_diskstatus:
 348 016c 4469736B 		.asciz "Disk not ready.\n\r"
 348      206E6F74 
 348      20726561 
 348      64792E0A 
 348      0D00
 349              	err_diskread:
 350 017e 52656164 		.asciz "Read failed\n\r"
 350      20666169 
 350      6C65640A 
 350      0D00
 351              	err_toobig:
 352 018c 546F6F20 		.asciz	"Too big\n\r"
 352      6269670A 
 352      0D00
 353              	err_diskfail:
 354 0196 43616E27 		.asciz	"Can't proceed\n\r"
 354      74207072 
 354      6F636565 
 354      640A0D00 
 355              	
 356              	/*
 357              	** Data areas.
 358              	*/
 359              	
 360              	/*
 361              	** The GDTR and IDTR contents.
 362              	*/
 363              	gdt_48:
 364 01a6 0020     		.word	0x2000		/* 1024 GDT entries x 8 bytes/entry = 8192 */
 365 01a8 00050000 		.quad	GDT_ADDRESS
 365      00000000 
 366              	
 367              	idt_48:
 368 01b0 0008     		.word	0x0800		/* 256 interrupts */
 369 01b2 00250000 		.quad	IDT_ADDRESS
 369      00000000 
 370              	
 371              	/*
 372              	** Originally, the GDT contents were here.  When booting from a floppy
 373              	** disk, that's not a problem, as all 510 available bytes of the boot
 374              	** sector can be used.  However, when booting from a hard drive, only
 375              	** the first 446 bytes (0x000-0x1bd) can be used, and including the GDT
 376              	** here pushed this part of the bootstrap over that limit.  The older
 377              	** machines in the lab (Intel D867PERL motherboards) didn't enforce
 378              	** this when booting from a flash drive; however, the current machines
GAS LISTING bootstrap.s 			page 8


 379              	** (Asus H270 Prime Pro motherboards) do, so the GDT contents are now
 380              	** in the second sector of the bootstrap program.
 381              	*/
 382              	
 383              	/*
 384              	** End of the first sector of the boot program.  The last two bytes
 385              	** of this sector must be AA55 in order for the disk to be recognized
 386              	** by the BIOS as bootable.
 387              	*/
 388 01ba 00000000 		.org	SECTOR_SIZE-4
 388      00000000 
 388      00000000 
 388      00000000 
 388      00000000 
 389              	
 390 01fc 8000     	drive:	.word	0x80	/* 0x00 = floppy, 0x80 = usb */
 391              	
 392              	boot_sig:
 393 01fe 55AA     		.word 0xAA55
 394              	
 395              	/*******************************************************
 396              	******* BEGINNING OF SECTOR TWO OF THE BOOTSTRAP *******
 397              	*******************************************************/
 398              	
 399              	/*
 400              	** Query the BIOS to get the list of usable memory regions
 401              	**
 402              	** Adapted from: http://wiki.osdev.org/Detecting_Memory_%28x86%29
 403              	** (see section "BIOS Function INT 0x15. EAX = 0xE820")
 404              	**
 405              	** After the first 'int', if the location 0x2D00 (4 bytes) contains -1,
 406              	** then this method failed to detect memory properly; otherwise, this
 407              	** location contains the number of elements read.
 408              	**
 409              	** The start of the array is at 0x2D04. The elements are tightly
 410              	** packed following the layout as defined below.  Each entry in the
 411              	** array contains the following information:
 412              	**
 413              	**	uint64_t  base address of region
 414              	**	uint64_t  length of region (0 --> ignore the entry)
 415              	**	uint32_t  type of region
 416              	**	uint32_t  ACIP 3.0 Extended Attributes
 417              	**
 418              	** The C struct definition is as follows:
 419              	**
 420              	** struct MemMapEntry
 421              	** {
 422              	**    uint32_t base[2];    // 64-bit base address
 423              	**    uint32_t length[2];  // 64-bit length
 424              	**    uint32_t type;       // 32-bit region type
 425              	**    uint32_t ACPI;       // 32-bit ACPI "extended attributes" bitfield
 426              	** };
 427              	**
 428              	** This structure must be packed in memory.  This shouldn't be a problem,
 429              	** but if it is, you may need to add this attribute at the end of the
 430              	** struct declaration before the semicolon:
 431              	**
GAS LISTING bootstrap.s 			page 9


 432              	**    __attribute__((packed))
 433              	**
 434              	** Parameters:
 435              	**     None
 436              	**/
 437              	check_memory:
 438              		// save everything
 439              		// pushaw
 440 0200 1E       		pushw	%ds
 441 0201 06       		pushw	%es
 442 0202 50       		pushw	%ax
 443 0203 53       		pushw	%bx
 444 0204 51       		pushw	%cx
 445 0205 52       		pushw	%dx
 446 0206 56       		pushw	%si
 447 0207 57       		pushw	%di
 448              		
 449              		// Set the start of the buffer
 450 0208 BBD002   		movw	$MMAP_SEGMENT, %bx // 0x2D0
 451 020b 8EDB     		mov	%bx, %ds           // Data segment now starts at 0x2D00
 452 020d 8EC3     		mov	%bx, %es           // Extended segment also starts at 0x2D00
 453              	
 454              		// The first 4 bytes are for the # of entries
 455 020f BF0400   		movw	$0x4, %di
 456              		// Make a valid ACPI 3.X entry
 457 0212 26C74514 		movw	$1, %es:20(%di)
 457      0100
 458              	
 459 0218 31ED     		xorw	%bp, %bp          // Count of entries in the list
 460 021a 6631DB   		xorl	%ebx, %ebx        // Must contain zeroes
 461              	
 462 021d 66BA5041 		movl	$MMAP_MAGIC_NUM, %edx   // Magic number into EDX
 462      4D53
 463 0223 66B820E8 		movl	$MMAP_CODE, %eax        // E820 memory command
 463      0000
 464 0229 66B91800 		movl	$24, %ecx               // Ask the BIOS for 24 bytes
 464      0000
 465 022f CD15     		int	$0x15                    // Call the BIOS
 466              	
 467              		// check for success
 468 0231 725D     		jc	cm_failed		// C == 1 --> failure
 469 0233 66BA5041 		movl	$MMAP_MAGIC_NUM, %edx	// sometimes EDX changes
 469      4D53
 470 0239 6639C2   		cmpl	%eax, %edx	// EAX should equal EDX after the call
 471 023c 7552     		jne	cm_failed
 472 023e 6685DB   		testl	%ebx, %ebx	// Should have at least one more entry
 473 0241 744D     		je	cm_failed
 474              		
 475 0243 EB1B     		jmp	cm_jumpin	// Good to go - start us off
 476              	
 477              	cm_loop:
 478 0245 66B820E8 		movl	$MMAP_CODE, %eax	// Reset our registers
 478      0000
 479 024b C7451401 		movw	$1, 20(%di)
 479      00
 480 0250 66B91800 		movl	$24, %ecx
 480      0000
GAS LISTING bootstrap.s 			page 10


 481 0256 CD15     		int	$0x15
 482 0258 722F     		jc	cm_end_of_list	// C == 1 --> end of list
 483 025a 66BA5041 		movl	$MMAP_MAGIC_NUM, %edx
 483      4D53
 484              	
 485              	cm_jumpin:
 486 0260 E322     		jcxz	cm_skip_entry	// Did we get any data?
 487              	
 488 0262 80F914   		cmp	$20, %cl	// Check the byte count
 489 0265 7607     		jbe	cm_no_text	// Skip the next test if only 20 bytes
 490              	
 491 0267 26F64514 		testb	$1, %es:20(%di)	// Check the "ignore this entry" flag
 491      01
 492 026c 7416     		je	cm_skip_entry
 493              	
 494              	cm_no_text:
 495 026e 26668B4D 		mov	%es:8(%di), %ecx	// lower half of length
 495      08
 496 0273 26660B4D 		or	%es:12(%di), %ecx	// now, full length
 496      0C
 497 0278 740A     		jz	cm_skip_entry
 498              	
 499 027a 45       		inc	%bp		// one more valid entry
 500              	
 501              		// make sure we don't overflow our space
 502 027b 81FD4A03 		cmpw	$MMAP_MAX_ENTRIES, %bp
 503 027f 7D08     		jge	cm_end_of_list
 504              	
 505              		// we're ok - move the pointer to the next struct in the array
 506 0281 83C718   		add	$24, %di
 507              	
 508              	cm_skip_entry:
 509              		// are there more entries to retrieve?
 510 0284 6685DB   		testl	%ebx, %ebx
 511 0287 75BC     		jne	cm_loop
 512              	
 513              	cm_end_of_list:
 514              		// All done!  Store the number of elements in 0x2D00
 515 0289 892E0000 		movw	%bp, %ds:0x0
 516              	
 517 028d F8       		clc	// Clear the carry bit and return
 518 028e EB0A     		jmp	cm_ret
 519              	
 520              	cm_failed:
 521 0290 66C70600 		movl	$-1, %ds:0x0	// indicate failure
 521      00FFFFFF 
 521      FF
 522 0299 F9       		stc
 523              		
 524              	cm_ret:	
 525              		// restore everything we saved
 526              		// popaw
 527 029a 5F       		popw	%di
 528 029b 5E       		popw	%si
 529 029c 5A       		popw	%dx
 530 029d 59       		popw	%cx
 531 029e 5B       		popw	%bx
GAS LISTING bootstrap.s 			page 11


 532 029f 58       		popw	%ax
 533 02a0 07       		popw	%es
 534 02a1 1F       		popw	%ds
 535 02a2 C3       		ret
 536              	
 537              	/*
 538              	** Startup code.
 539              	**
 540              	** This code configures the GDT, enters protected mode, and then
 541              	** transfers to the OS entry point.
 542              	*/
 543              	
 544              	switch:
 545 02a3 FA       		cli
 546 02a4 B080     		movb	$0x80, %al	/* disable NMIs */
 547 02a6 E670     		outb	%al, $0x70
 548              	
 549 02a8 E82500   		call	floppy_off
 550 02ab E82B00   		call	enable_A20
 551 02ae E86DFE   		call	move_gdt
 552              		// call	check_mem
 553 02b1 E84CFF   		call	check_memory
 554              	
 555              	/*
 556              	** The IDTR and GDTR are loaded relative to this segment, so we must
 557              	** use the full offsets from the beginning of the segment (0000:0000);
 558              	** however, we were loaded at 0000:7c00, so we need to add that in.
 559              	*/
 560 02b4 0F011EB0 		lidt	idt_48 + BOOT_ADDRESS
 560      7D
 561 02b9 0F0116A6 		lgdt	gdt_48 + BOOT_ADDRESS
 561      7D
 562              	
 563 02be 0F20C0   		movl	%cr0, %eax	/* get current CR0 */
 564 02c1 6683C801 		orl	$1, %eax	/* set the PE bit */
 565 02c5 0F22C0   		movl	%eax, %cr0	/* and store it back. */
 566              		
 567              		/*
 568              		** We'll be in protected mode at the start of the user's code
 569              		** right after this jump executes.
 570              		**
 571              		** First, a byte to force 32-bit mode execution, followed by
 572              		** a 32-bit long jump.  The long ("far") jump loads both EIP
 573              		** and CS with the proper values so that when we land at the
 574              		** destination address in protected mode, the next instruction
 575              		** fetch doesn't cause a fault.
 576              		**
 577              		** The old code for this:
 578              		**
 579              		**	.byte	06xx, 0xEA
 580              		**	.long	TARGET_ADDRESS
 581              		**	.word	GDT_CODE
 582              		*/
 583              	
 584 02c8 66       		.byte	0x66	/* 32-bit mode prefix */
 585              		.code32
 586 02c9 EA000001 		ljmp	$GDT_CODE, $TARGET_ADDRESS
GAS LISTING bootstrap.s 			page 12


 586      001000
 587              		.code16
 588              	
 589              	/*
 590              	** Supporting code.
 591              	**
 592              	** Turn off the motor on the floppy disk drive.
 593              	*/
 594              	floppy_off:
 595 02d0 52       		push	%dx
 596 02d1 BAF203   		movw	$0x3f2, %dx
 597 02d4 30C0     		xorb	%al, %al
 598 02d6 EE       		outb	%al, %dx
 599 02d7 5A       		pop	%dx
 600 02d8 C3       		ret
 601              	
 602              	/*
 603              	** Enable the A20 gate for full memory access.
 604              	*/
 605              	enable_A20:
 606 02d9 E82D00   		call	a20wait
 607 02dc B0AD     		movb	$0xad, %al
 608 02de E664     		outb	%al, $0x64
 609              	
 610 02e0 E82600   		call	a20wait
 611 02e3 B0D0     		movb	$0xd0, %al
 612 02e5 E664     		outb	%al, $0x64
 613              	
 614 02e7 E83000   		call	a20wait2
 615 02ea E460     		inb	$0x60, %al
 616 02ec 6650     		pushl	%eax
 617              	
 618 02ee E81800   		call	a20wait
 619 02f1 B0D1     		movb	$0xd1, %al
 620 02f3 E664     		outb	%al, $0x64
 621              	
 622 02f5 E81100   		call	a20wait
 623 02f8 6658     		popl	%eax
 624 02fa 0C02     		orb	$2, %al
 625 02fc E660     		outb	%al, $0x60
 626              	
 627 02fe E80800   		call	a20wait
 628 0301 B0AE     		mov	$0xae, %al
 629 0303 E664     		out	%al, $0x64
 630              	
 631 0305 E80100   		call	a20wait
 632 0308 C3       		ret
 633              	
 634              	a20wait:	/* wait until bit 1 of the device register is clear */
 635 0309 66B90000 		movl    $65536, %ecx	/* loop a lot if need be */
 635      0100
 636              	wait_loop: 
 637 030f E464     		inb     $0x64, %al	/* grab the byte */
 638 0311 A802     		test    $2, %al		/* is the bit clear? */
 639 0313 7404     		jz      wait_exit	/* yes */
 640 0315 E2F8     		loop    wait_loop	/* no, so loop */
 641 0317 EBF0     		jmp     a20wait		/* if still not clear, go again */
GAS LISTING bootstrap.s 			page 13


 642              	wait_exit:    
 643 0319 C3       		ret
 644              	
 645              	a20wait2:	/* like a20wait, but waits until bit 0 is set. */
 646 031a 66B90000 		mov     $65536, %ecx
 646      0100
 647              	wait2_loop:
 648 0320 E464     		in      $0x64, %al
 649 0322 A801     		test    $1, %al
 650 0324 7504     		jnz     wait2_exit
 651 0326 E2F8     		loop    wait2_loop
 652 0328 EBF0     		jmp     a20wait2
 653              	wait2_exit:
 654 032a C3       		ret
 655              	
 656              	/*
 657              	** The GDT.  This cannot be created in C because the bootstrap is not
 658              	** linked with that code.
 659              	*/
 660              	start_gdt:
 661 032b 00000000 		.word	0,0,0,0		/* first GDT entry is always null */
 661      00000000 
 662              	
 663              	linear_seg:	/* limit FFFFF, base 0, R/W data seg, 32-bit 4K */
 664 0333 FFFF     		.word	0xFFFF	/* limit[15:0] */
 665 0335 0000     		.word	0x0000	/* base[15:0] */
 666 0337 00       		.byte	0x00	/* base[23:16] */
 667 0338 92       		.byte	0x92	/* access byte */
 668 0339 CF       		.byte	0xCF	/* granularity */
 669 033a 00       		.byte	0x00	/* base[31:24] */
 670              	
 671              	code_seg:	/* limit FFFFF, base 0, R/E code seg, 32-bit 4K */
 672 033b FFFF     		.word	0xFFFF
 673 033d 0000     		.word	0x0000
 674 033f 00       		.byte	0x00
 675 0340 9A       		.byte	0x9A	/* 1 00 1 1010: present, prio 0, C/D, R/E code */
 676 0341 CF       		.byte	0xCF	/* 1 1 00 1111: 4K, 32-bit, 0, 0, limit[19:16] */
 677 0342 00       		.byte	0x00
 678              	
 679              	data_seg:	/* limit FFFFF, base 0, R/W data seg, 32-bit 4K */
 680 0343 FFFF     		.word	0xFFFF
 681 0345 0000     		.word	0x0000
 682 0347 00       		.byte	0x00
 683 0348 92       		.byte	0x92	/* 1 00 1 0010: present, prio 0, C/D, R/W data */
 684 0349 CF       		.byte	0xCF
 685 034a 00       		.byte	0x00
 686              	
 687              	stack_seg:	/* limit FFFFF, base 0, R/W data seg, 32-bit 4K */
 688 034b FFFF     		.word	0xFFFF
 689 034d 0000     		.word	0x0000
 690 034f 00       		.byte	0x00
 691 0350 92       		.byte	0x92
 692 0351 CF       		.byte	0xCF
 693 0352 00       		.byte	0x00
 694              	
 695              	end_gdt:
 696              	gdt_len = end_gdt - start_gdt
GAS LISTING bootstrap.s 			page 14


 697              	
 698              	/*
 699              	** The end of this program will contain a list of the sizes and load
 700              	** addresses of all of the blocks to be loaded.  THese values are
 701              	** inserted here by the Modify program, which checks that there are
 702              	** not so many blocks that the IDT would be overwritten.  The layout
 703              	** of the data is:
 704              	**
 705              	**	offset
 706              	**	segment
 707              	**	# of sectors
 708              	**
 709              	** with the # of sectors for the first block appearing at firstcount, and
 710              	** the other values appearing just before it.  If additional blocks are
 711              	** to be loaded, their values appear just before the previous set.
 712              	*/
 713              	
 714 0353 00000000 		.org	BOOT_SIZE - 2
 714      00000000 
 714      00000000 
 714      00000000 
 714      00000000 
 715              	firstcount:
 716 03fe 0000     		.word	0	/* n_sectors for 1st module will go here */
GAS LISTING bootstrap.s 			page 15


DEFINED SYMBOLS
         bootstrap.S:34     *ABS*:00000000000007c0 BOOT_SEGMENT
         bootstrap.S:35     *ABS*:0000000000007c00 BOOT_ADDRESS
         bootstrap.S:36     *ABS*:0000000000000000 START_SEGMENT
         bootstrap.S:37     *ABS*:0000000000007e00 START_OFFSET
         bootstrap.S:38     *ABS*:0000000000000200 SECTOR_SIZE
         bootstrap.S:39     *ABS*:0000000000000400 BOOT_SIZE
         bootstrap.S:40     *ABS*:000000000000fe00 OFFSET_LIMIT
         bootstrap.S:42     *ABS*:000000000000034a MMAP_MAX_ENTRIES
         bootstrap.S:50     .text:0000000000000000 begtext
         bootstrap.S:390    .text:00000000000001fc drive
         bootstrap.S:73     .text:000000000000001e diskok
         bootstrap.S:347    .text:000000000000016c err_diskstatus
         bootstrap.S:227    .text:000000000000010b dispMsg
         bootstrap.S:329    .text:0000000000000158 max_sec
         bootstrap.S:330    .text:0000000000000159 max_head
         bootstrap.S:335    .text:000000000000015a msg_loading
         bootstrap.S:144    .text:0000000000000086 readprog
         bootstrap.S:715    .text:00000000000003fe firstcount
         bootstrap.S:122    .text:0000000000000068 nextblock
         bootstrap.S:218    .text:0000000000000102 done_loading
         bootstrap.S:148    .text:000000000000008a retry
         bootstrap.S:327    .text:0000000000000154 sec
         bootstrap.S:328    .text:0000000000000156 head
         bootstrap.S:167    .text:00000000000000af readcont
         bootstrap.S:349    .text:000000000000017e err_diskread
         bootstrap.S:353    .text:0000000000000196 err_diskfail
         bootstrap.S:337    .text:0000000000000162 msg_dot
         bootstrap.S:175    .text:00000000000000c1 adjust
         bootstrap.S:181    .text:00000000000000cb readcont2
         bootstrap.S:200    .text:00000000000000ee save_sector
         bootstrap.S:351    .text:000000000000018c err_toobig
         bootstrap.S:209    .text:00000000000000fb readdone
         bootstrap.S:341    .text:000000000000016a msg_bar
         bootstrap.S:339    .text:0000000000000164 msg_go
         bootstrap.S:544    .text:00000000000002a3 switch
         bootstrap.S:230    .text:000000000000010d repeat
         bootstrap.S:241    .text:000000000000011b getOut
         bootstrap.S:292    .text:000000000000011e move_gdt
         bootstrap.S:660    .text:000000000000032b start_gdt
                            *ABS*:0000000000000028 gdt_len
         bootstrap.S:307    .text:0000000000000136 check_mem_basic
         bootstrap.S:363    .text:00000000000001a6 gdt_48
         bootstrap.S:367    .text:00000000000001b0 idt_48
         bootstrap.S:392    .text:00000000000001fe boot_sig
         bootstrap.S:437    .text:0000000000000200 check_memory
         bootstrap.S:520    .text:0000000000000290 cm_failed
         bootstrap.S:485    .text:0000000000000260 cm_jumpin
         bootstrap.S:477    .text:0000000000000245 cm_loop
         bootstrap.S:513    .text:0000000000000289 cm_end_of_list
         bootstrap.S:508    .text:0000000000000284 cm_skip_entry
         bootstrap.S:494    .text:000000000000026e cm_no_text
         bootstrap.S:524    .text:000000000000029a cm_ret
         bootstrap.S:594    .text:00000000000002d0 floppy_off
         bootstrap.S:605    .text:00000000000002d9 enable_A20
         bootstrap.S:634    .text:0000000000000309 a20wait
         bootstrap.S:645    .text:000000000000031a a20wait2
GAS LISTING bootstrap.s 			page 16


         bootstrap.S:636    .text:000000000000030f wait_loop
         bootstrap.S:642    .text:0000000000000319 wait_exit
         bootstrap.S:647    .text:0000000000000320 wait2_loop
         bootstrap.S:653    .text:000000000000032a wait2_exit
         bootstrap.S:663    .text:0000000000000333 linear_seg
         bootstrap.S:671    .text:000000000000033b code_seg
         bootstrap.S:679    .text:0000000000000343 data_seg
         bootstrap.S:687    .text:000000000000034b stack_seg
         bootstrap.S:695    .text:0000000000000353 end_gdt

NO UNDEFINED SYMBOLS
