h16762
s 00015/00012/00128
d D 1.11 18/03/01 12:36:44 wrc 11 10
c added F8 instructions
e
s 00058/00035/00082
d D 1.10 17/12/07 10:29:54 wrc 10 9
c updated for new lab machines
e
s 00014/00007/00103
d D 1.9 16/03/10 12:51:00 wrc 9 8
c (wrc) revised for current lab setup
e
s 00020/00020/00090
d D 1.8 11/10/17 15:54:14 wrc 8 7
c updated for use with Ubuntu
e
s 00002/00002/00108
d D 1.7 11/01/24 15:27:21 wrc 7 6
c changed sccs id to version/date lines
e
s 00025/00004/00085
d D 1.6 11/01/24 15:26:25 wrc 6 5
c updated USB slot information
e
s 00012/00004/00077
d D 1.5 09/10/18 16:33:04 wrc 5 4
c updated for usb flash drive use
e
s 00049/00019/00032
d D 1.4 06/10/14 14:23:34 wrc 4 3
c minor clarifications and sp1/sp2 compatability update
e
s 00002/00001/00049
d D 1.3 05/03/15 15:49:11 wrc 3 2
c (wrc) minor wording changes
e
s 00016/00005/00034
d D 1.2 02/05/16 15:14:50 kar 2 1
c Version 2: improvements based on my experience with 20013 506.
e
s 00039/00000/00000
d D 1.1 02/01/15 16:18:23 kar 1 0
c date and time created 02/01/15 16:18:23 by kar
e
u
U
f e 0
t
T
I 4
D 6
SP1/SP2 standalone framework README file
sccs id: %W%	%G%
E 6
I 6
D 9
SP1/SP2 standalone framework information
E 9
I 9
Systems Programming standalone framework information
E 9

D 7
File name:  %W%
Version:    %G%
E 7
I 7
Version:  %W%
Date:     %G%
E 7
E 6
---------------------------------------------------------------------------

E 4
I 1
Notes on the Makefile:

D 4
	DO NOT USE makemake!  You must edit the given Makefile to tell it
	about the file(s) you create.  After adding or removing files
	from the Makefile (or changing your #includes), do a "make depend"
E 4
I 4
	DO NOT USE makemake!  You must edit the given Makefile to tell
	it about the file(s) you create.  Add your own file names (both 
	source and object versions) to the U_* macros at the top of the
	Makefile.
E 4

I 4
	After adding or removing files from the Makefile (or changing
	your #includes), do a "make depend" to adjust the Makefile's
	dependency entries.

E 4
To create your program:

D 4
	make
E 4
I 4
	* run 'make' in your project directory
E 4

I 5
To copy it onto a USB flash drive:

D 6
	* run 'make usbu' to use the upper front-panel USB slot
	* run 'make usbl' to use the lower front-panel USB slot
E 6
I 6
	All machines in the DSL have at least two front-panel USB slots
D 10
	located at the bottom on the front of the machine; some have a
D 8
	third slot, located next to the floppy disk drive.  To copy a
	bootable image onto a flash drive inserted in one of these slots,
	you must specify the slot position.
E 6

I 6
	On the older machines in the lab, the two USB slots are arranged
	vertically, and are referred to as the upper (usbu) and lower
	(usbl) slots.  On the newer machines, the slots are arranged
	horizontally, and are referred to as the left (usbl) and right
	(usbr) slots.  On newer machines with a third USB slot, that slot
	is the upper (usbu) USB slot.
E 8
I 8
	third slot, located next to the floppy disk drive.  Under Ubuntu,
	you can use any of these slots; insert a flash drive, and the OS
E 10
I 10
	(typically, two USB-2 and one blue USB-3).  Under Ubuntu, you
	can use any of these slots; insert a flash drive, and the OS
E 10
	automatically creates device entries for the drive, using the
	next available disk name in /dev (e.g., /dev/sdg).

D 10
	Because the name of the device in the filesystem varies depending
	on the number and type of disk drives in the system, special
	files named /local/devices/disk on each DSL system.  This file
	has the necessary major/minor device numbers to work with the
	plugged-in flash drive.

E 10
	To copy your bootable image to the flash drive, plug the drive
	into a USB socket, wait a few moments for Ubuntu to recognize
	it and create the device entries in /dev, and type
E 8

D 8
	* run 'make usbu' to use the upper front-panel USB slot (on any
	  system)
E 8
I 8
		make usb
E 8

D 8
	* run 'make usbl' to use the lower (on an "older" system) or the
	  left (on a "newer" system) front-panel USB slot

	* run 'make usbr' to use the right front-panel USB slot (on a
	  "newer" system)
E 8
I 8
	This will remake the usb.image file (if necessary), and will then
D 9
	copy it out to /local/devices/disk.
E 9
I 9
D 10
	copy it out to the USB drive.
E 10
I 10
	copy it out to the USB drive.  In order to find the correct
	drive, the installation uses a local command named 'dcopy'.  This
	command runs a second command named 'dfind' to identify the USB
	drive(s) plugged into the system, and then runs a 'dd' command
	to copy the usb.image file to the first USB device it finds.
	(You can run 'dfind' yourself if you want to be sure that 'dcopy'
	will be able to find the flash drive.)
E 10
E 9
E 8

E 6
E 5
D 9
To copy it onto a 3.5" floppy in the drive:

D 4
	make floppy
E 4
I 4
	* run 'make floppy' in your project directory
E 9
I 9
	Note:  the Makefile still has a "floppy" target for creating a
	bootable floppy disk image.  However, this hasn't been used for
	quite a while, and the necessary support tools to do the copying
	don't exist on the current systems.  If you want to try using the
	floppy disk as a boot device, let me know.
E 9
E 4

I 4
D 10
To boot your program:
E 10
I 10
To boot your program once you have copied it to a bootable medium:
E 10

D 5
	* be sure you have copied it to floppy disk
E 5
I 5
D 10
	* be sure you have copied it to a bootable medium
E 5
D 8
	* shut down Solaris by executing the 'uhalt' command
E 8
I 8
D 9
	* shut down Ubuntu by executing the 'uhalt' command
E 9
I 9
	* shut down Ubuntu by executing the 'uhalt' command or using the
	  standard Ubuntu "shut down" menu entry
E 10
I 10
	* DO NOT USE the machine named 'sherlock' - it's a server for
	  the lab, and should not be shut down
	* shut down Ubuntu by using the standard Ubuntu "shut down"
	  menu entry
E 10
E 9
E 8
D 5
	* insert your floppy disk in the drive
E 5
I 5
	* insert the bootable medium
E 5
D 10
	* push the reset button on the front of the machine
E 10
I 10
	* make sure the terminal connected to this machine is turned on
	* push the reset button on the front panel (at the top, on
	  the righthand side - the larger button on the lefthand 
	  side is the power button)
E 10

D 8
	DO NOT just push the reset button - Solaris must be shut down
E 8
I 8
	DO NOT just push the reset button - Ubuntu must be shut down
E 8
	correctly in order to avoid damaging the filesystems.

I 9
D 10
	The lab machines should be set up to give boot priority to
	USB devices.  If you find one that isn't, let me know ASAP.
	(Please don't try to fix it yourself.)
E 10
I 10
	Unfortunately, the motherboards in the current lab machines are
	somewhat stupid; once a flash drive is unplugged, they forget
	that we want to give boot priority to flash drives once the
	flash drive is unplugged.  For now, you will need to interrupt
D 11
	the boot process as follows:
E 11
I 11
	the boot process in one of the following two ways:
E 11

D 11
		* When the ASUS log appears on the screen, press either
		  the F2 or the DEL key on the keyboard.  (If you miss
		  your window of opportunity to do this and Ubuntu boots
		  up, don't panic; just shut Ubuntu down and try again.)
E 11
I 11
		1. When the ASUS logo appears on the screen, press the
		   F8 key to bring up the boot device screen.  Scroll
		   down the list using the arrow keys until the flash
		   drive is highlighted, and press ENTER to boot from it.
E 11

D 11
		* Using the right arrow key, select the "Boot" menu
E 11
I 11
		2. When the ASUS log appears on the screen, press either
		   the F2 or the DEL key on the keyboard to bring up the
		   BIOS screen.  Use the right arrow key to select the
		   "Boot" menu, then the down arrow key to the bottom of
		   the "Boot" menu, where you will find an "Override"
		   section.  Select the flash drive entry and press
		   ENTER.
E 11

D 11
		* Using the down arrow key, scroll all the way down to
		  the bottom of the "Boot" menu until you reach the
		  "Override" section; you should see an entry for the
		  USB flash drive there.

		* Select the USB flash drive entry and press enter.
E 11
I 11
	If you miss your window of opportunity (about three second)
	to press one of these function keys and Ubuntu boots up, don't
	panic; just shut Ubuntu down and try again.
E 11

	If you want to run your program again, leave the flash drive
	inserted and press the reset button again.
E 10

E 9
D 8
To reboot Solaris:
E 8
I 8
To reboot Ubuntu:
E 8

D 5
	* take your floppy disk out of the drive
E 5
I 5
	* take your bootable medium out of the machine
E 5
	* push the reset button

E 4
Compiling your program creates several files:

D 10
	prog.o	linked, object form of the system
E 10
I 10
	prog.o:	linked, object form of the system
E 10

D 10
	prog.b	binary version of the system - generated from prog.o
E 10
I 10
	prog.b:	binary version of the system - generated from prog.o
E 10
		by removing all the object file headers and symbol table

D 4
	prog.nl	namelist of the prog.o file - lists all the global symbols,
		their values, and the section of memory they're in (Text,
		Data, Bss)
E 4
I 4
D 10
	prog.nl	namelist of the prog.o file - lists all global symbols,
E 10
I 10
	prog.nl:  namelist of the prog.o file - lists all global symbols,
E 10
		their values, and the program section they're defined in
		(Text, Data, Bss)
E 4

D 4
	prog.dis a disassembly of the prog.o file - a text version of the
		binary machine code

E 4
D 2
	prog.img the binary system image - contains the bootstrap, the
		protected mode switch code, ans the system, in this layout:
E 2
I 2
D 5
	disk.image the binary system image - contains the bootstrap, the
E 5
I 5
D 10
	*.image	the binary system image - contains the bootstrap, the
E 10
I 10
	*.image:  the binary system image - contains the bootstrap, the
E 10
E 5
		protected mode startup code, and your stuff, in this layout:
E 2

			bootstrap	first sector
			switch code	second sector
D 2
			system		third through last sector
E 2
I 2
			your program	sectors 3 through n+2
			next file	n+3 through p+n+2
			next file	p+n+3 through q+p+n+2
			etc. (see below)
I 5

		This file will be named floppy.image or usb.image,
		depending on which device you'll be using.
E 5
E 2
D 10
	
D 2
	modify	used to patch the system length into the boot sector
		of the prog.img file
E 2
I 2
	BuildImage used to patch the system length into the boot sector
		of the disk.image file
E 2
	
I 2
D 4
Details on loading additional files
E 4
I 4
	Offsets	prints byte offsets for major structures (only present
D 9
		in SP2 distributions)
E 9
I 9
		in distributions of the baseline OS written by the class)
E 10
I 10

	BuildImage:  is used to patch the system length into the boot
		sector of the disk.image file

	Offsets:  (may not be present) prints byte offsets for major
		structures (only present in distributions of the baseline
		OS written by the class in Systems Programming)
E 10
E 9
E 4

D 4
	You can load additional files into memory by adding the name of the
	file and the address where you want it loaded to the end of the
	BuildImage command in the Makefile.  However, because the loading
D 3
	is done in real mode, you may not load into addresses larger than
E 3
I 3
	is done in real mode, you cannot load into addresses larger than
E 3
	0x9ffff.
E 4
I 4
Other things you can 'make':
E 4

I 3
D 4
------------------------------------------------
E 3
E 2
SCCS ID: %W%	%G%
E 4
I 4
D 10
	prog.dis a disassembly of the prog.o file - a text version of the
		binary machine code
	
	clean	deletes all object, listing, and binary files
E 10
I 10
	prog.dis:  a disassembly of the prog.o file - a text version of
		the binary machine code

	clean:	deletes all object, listing, and binary files

	depend:	recreates the dependency lists in the Makefile
E 10

D 10
	depend	recreates the dependency lists in the Makefile
	
E 10
Loading additional files:

	You can load additional files into memory by adding the name of
	the file and the address where you want it loaded to the end of
	the BuildImage command in the Makefile.  However, because the
	loading is done in real mode, you cannot load into addresses
D 10
	above 0x9ffff.
E 10
I 10
	above 0x9ffff.  See the code in BuildImage.c for more details.
E 10
E 4
E 1
