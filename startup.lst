GAS LISTING startup.s 			page 1


   1              	# 1 "startup.S"
   1              	/*
   0              	
   0              	
   2              	** SCCS ID:	@(#)startup.S	1.11	3/29/18
   3              	**
   4              	** File:	startup.S
   5              	**
   6              	** Author:	Jon Coles
   7              	**
   8              	** Contributor:	Warren R. Carithers, K. Reek
   9              	**
  10              	** Description:	SP startup code.
  11              	**
  12              	** This code prepares the various registers for execution of
  13              	** the program.  It sets up all the segment registers and the
  14              	** runtime stack.  By the time this code is running, we're in
  15              	** protected mode already.
  16              	**
  17              	** This code is intended to be assembled with as, not as86.
  18              	*/
  19              		.arch	i386
  20              	
  21              	#include "bootstrap.h"
   1              	/*
  22              	
  23              	/*
  24              	** Configuration options - define in Makefile
  25              	**
  26              	**	CLEAR_BSS_SEGMENT	include code to clear all BSS space
  27              	**	SP_OS_CONFIG		enable SP OS-specific startup variations
  28              	*/
  29              	
  30              	/*
  31              	** A symbol for locating the beginning of the code.
  32              	*/
  33              		.globl begtext
  34              	
  35              		.text
  36              	begtext:
  37              	
  38              	/*
  39              	** The entry point.
  40              	*/
  41              		.globl	_start
  42              	
  43              	_start:
  44 0000 FA       		cli			/* seems to be reset on entry to p. mode */
  45 0001 B000     		movb	$0x00, %al	/* re-enable NMIs (bootstrap */
  46 0003 E670     		outb	$0x70		/*   turned them off) */
  47              	
  48              	/*
  49              	** Set the data and stack segment registers (code segment register
  50              	** was set by the long jump that switched us into protected mode).
  51              	*/
  52 0005 31C0     		xorl	%eax, %eax	/* clear EAX */
  53 0007 66B81800 		movw	$GDT_DATA, %ax	/* GDT entry #3 - data segment */
GAS LISTING startup.s 			page 2


  54 000b 8ED8     		movw	%ax, %ds	/* for all four data segment registers */
  55 000d 8EC0     		movw	%ax, %es
  56 000f 8EE0     		movw	%ax, %fs
  57 0011 8EE8     		movw	%ax, %gs
  58              	
  59 0013 66B82000 		movw	$GDT_STACK, %ax	/* entry #4 is the stack segment */
  60 0017 8ED0     		movw	%ax, %ss
  61              	
  62 0019 BD000001 		movl	$TARGET_STACK, %ebp	/* set up the system frame pointer */
  62      00
  63 001e 89EC     		movl	%ebp, %esp	/* and stack pointer */
  64              	
  65              	#ifdef CLEAR_BSS_SEGMENT
  66              	
  67              	/*
  68              	** Zero the BSS segment
  69              	**
  70              	** These symbols are defined automatically by the linker.
  71              	*/
  72              		.globl	__bss_start,_end
  73              	
  74 0020 BF000000 		movl	$__bss_start,%edi
  74      00
  75              	clearbss:
  76 0025 C7070000 		movl	$0,(%edi)
  76      0000
  77 002b 83C704   		addl	$4,%edi
  78 002e 81FF0000 		cmpl	$_end,%edi
  78      0000
  79 0034 72EF     		jb	clearbss
  80              	
  81              	#endif
  82              	
  83              	#ifdef SP_OS_CONFIG
  84              	
  85              	/*
  86              	**
  87              	** Configuration for the baseline OS.
  88              	**
  89              	** Initialize devices
  90              	*/
  91 0036 E8FCFFFF 		call	_init		// initialize the OS
  91      FF
  92              	
  93              	/*
  94              	** Restore the first user process context
  95              	**
  96              	** WARNING:  must set things up so that the stack looks like
  97              	** we're returning to the context restore routine after handling
  98              	** an interrupt!!!
  99              	*/
 100 003b E9FCFFFF 		jmp	__isr_restore   // defined in isr_stubs.S
 100      FF
 101              	
 102              	#else
 103              	
 104              	/*
GAS LISTING startup.s 			page 3


 105              	**
 106              	** Configuration for the interrupt handling assignment.
 107              	**
 108              	** Initialize various devices
 109              	*/
 110              		call	__init_interrupts	/* initialize the interrupt system */
 111              		call	c_io_init	/* initialize the console I/O routines */
 112              	
 113              	/*
 114              	** Call the user's main program
 115              	*/
 116              		call	main
 117              	
 118              	/*
 119              	** Returned from the main function!  Stop execution.
 120              	*/
 121              		cli			// Disable interrupts
 122              		pushl	$message	// Print the message saying that
 123              		pushl	$24		//   the main function returned.
 124              		movl	$80,%eax	//   This goes to the lower right
 125              		subl	$messagelen,%eax //  corner of the screen.
 126              		pushl	%eax
 127              		call	c_puts_at
 128              	die:	hlt			// Stop.
 129              		jmp	die
 130              	
 131              	message: .string "     ***** Returned from main! *****     "
 132              	messagelen = . - message - 1
 133              	
 134              	#endif
 135              	
 136              	/*
 137              	** Support routines needed for boot up and the console.
 138              	*/
 139              	ARG1	= 8			// Offset to 1st argument
 140              	ARG2	= 12			// Offset to 2nd argument
 141              	
 142              	/*
 143              	** Name:	__inb, __inw, __inl
 144              	**
 145              	** Description: read a single byte, word, or longword from the specified
 146              	**		input port
 147              	** Arguments:	the port number
 148              	** Returns:	the byte, word, or longword value from the port (unused
 149              	**		high-order bytes are zeroed)
 150              	*/
 151              		.globl	__inb, __inw, __inl
 152              	
 153              	__inb:
 154 0040 C8000000 		enter	$0,$0
 155 0044 31C0     		xorl	%eax,%eax	// Clear the high order bytes of %eax
 156 0046 8B5508   		movl	ARG1(%ebp),%edx	// Move port number to %edx
 157 0049 EC       		inb	(%dx)		// Get a byte from the port into %al (low
 158 004a C9       		leave			//   byte of %eax)
 159 004b C3       		ret
 160              	__inw:
 161 004c C8000000 		enter	$0,$0
GAS LISTING startup.s 			page 4


 162 0050 31C0     		xorl	%eax,%eax	// Clear the high order bytes of %eax
 163 0052 8B5508   		movl	ARG1(%ebp),%edx	// Move port number to %edx
 164 0055 66ED     		inw	(%dx)		// Get a word from the port into %ax (low
 165 0057 C9       		leave			//   word of %eax)
 166 0058 C3       		ret
 167              	__inl:
 168 0059 C8000000 		enter	$0,$0
 169 005d 31C0     		xorl	%eax,%eax	// Clear the high order bytes of %eax
 170 005f 8B5508   		movl	ARG1(%ebp),%edx	// Move port number to %edx
 171 0062 ED       		inl	(%dx)		// Get a longword from the port into %eax
 172 0063 C9       		leave
 173 0064 C3       		ret
 174              		
 175              	/*
 176              	** Name:	__outb, __outw, __outl
 177              	**
 178              	** Description: write a single byte, word, or longword to the specified
 179              	**		output port
 180              	** Arguments:	the port number, the value to write to it (unused high-order
 181              	**		bytes are ignored)
 182              	*/
 183              		.globl	__outb, __outw, __outl
 184              	__outb:
 185 0065 C8000000 		enter	$0,$0
 186 0069 8B5508   		movl	ARG1(%ebp),%edx	// Get the port number into %edx,
 187 006c 8B450C   		movl	ARG2(%ebp),%eax	//   and the value into %eax
 188 006f EE       		outb	(%dx)		// Output that byte to the port
 189 0070 C9       		leave			//   (only %al is sent)
 190 0071 C3       		ret
 191              	__outw:
 192 0072 C8000000 		enter	$0,$0
 193 0076 8B5508   		movl	ARG1(%ebp),%edx	// Get the port number into %edx,
 194 0079 8B450C   		movl	ARG2(%ebp),%eax	//   and the value into %eax
 195 007c 66EF     		outw	(%dx)		// Output that word to the port.
 196 007e C9       		leave			//   (only %ax is sent)
 197 007f C3       		ret
 198              	__outl:
 199 0080 C8000000 		enter	$0,$0
 200 0084 8B5508   		movl	ARG1(%ebp),%edx	// Get the port number into %edx,
 201 0087 8B450C   		movl	ARG2(%ebp),%eax	//   and the value into %eax
 202 008a EF       		outl	(%dx)		// Output that longword to the port.
 203 008b C9       		leave
 204 008c C3       		ret
 205              	
 206              	/*
 207              	** __get_flags: return the current processor flags
 208              	**	int __get_flags( void );
 209              	*/
 210              		.globl	__get_flags
 211              	
 212              	__get_flags:
 213 008d 9C       		pushfl			// Push flags on the stack,
 214 008e 58       		popl	%eax		//   and pop them into eax.
 215 008f C3       		ret
 216              	
 217              	/*
 218              	** __pause: halt until something happens
GAS LISTING startup.s 			page 5


 219              	**      void __pause( void );
 220              	*/
 221              		.globl	__pause
 222              	
 223              	__pause:
 224 0090 C8000000 		enter	$0,$0
 225 0094 FB       		sti
 226 0095 F4       		hlt
 227 0096 C9       		leave
 228 0097 C3       		ret
 229              	
 230              	/*
 231              	** __get_ra: get the return address for the calling function
 232              	**           (i.e., where whoever called us will go back to)
 233              	*/
 234              		.globl	__get_ra
 235              	
 236              	__get_ra:
 237              		// DO NOT create a stack frame - use the caller's
 238              		//
 239              		// Caller's return address is between the saved EBP
 240              		// and its first parameter
 241 0098 8B4504   		movl	4(%ebp), %eax
 242 009b C3       		ret
GAS LISTING startup.s 			page 6


DEFINED SYMBOLS
           startup.S:36     .text:0000000000000000 begtext
           startup.S:43     .text:0000000000000000 _start
           startup.S:75     .text:0000000000000025 clearbss
           startup.S:139    *ABS*:0000000000000008 ARG1
           startup.S:140    *ABS*:000000000000000c ARG2
           startup.S:153    .text:0000000000000040 __inb
           startup.S:160    .text:000000000000004c __inw
           startup.S:167    .text:0000000000000059 __inl
           startup.S:184    .text:0000000000000065 __outb
           startup.S:191    .text:0000000000000072 __outw
           startup.S:198    .text:0000000000000080 __outl
           startup.S:212    .text:000000000000008d __get_flags
           startup.S:223    .text:0000000000000090 __pause
           startup.S:236    .text:0000000000000098 __get_ra

UNDEFINED SYMBOLS
__bss_start
_end
_init
__isr_restore
